// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ? means it is not necessary to have a value
// @id means it is the primary key
// @default(cuid()) means it will generate a unique id
model User {
  id          String     @id @default(cuid())
  clerkUserId String     @unique
  email       String     @unique
  name        String
  imageUrl    String?
  role        String?
  articles    Articles[]
  comments    Comment[]
  likes       Like[]
  // A user can like multiple articles
}

// @relation means it is a foreign key
model Articles {
  id            String    @id @default(cuid())
  title         String
  content       String
  category      String
  featuredImage String
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  comments      Comment[]
  likes         Like[] // An article can have multiple likes
  createdAt     DateTime  @default(now())
}

model Comment {
  id        String   @id @default(cuid())
  body      String
  articleId String
  article   Articles @relation(fields: [articleId], references: [id])
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(cuid())
  isLiked   Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  article   Articles @relation(fields: [articleId], references: [id])
  articleId String
  createdAt DateTime @default(now())

  @@unique([userId, articleId]) // Ensures a user can like an article only once
}

model Project {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  githubUrl    String?
  liveUrl      String?
  techStack    String
  projectImage String
  author       User     @relation(fields: [authorId], references: [id])
  authorId     Int
  createdAt    DateTime @default(now())
}